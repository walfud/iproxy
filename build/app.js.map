{"version":3,"sources":["../app.js"],"names":["proxys","saver","where","proxy","Array","isArray","i","replace","length","push","console","log","splice","file","fs","readdirSync","name","path","parse","browser","puppeteer","launch","headless","args","page","newPage","require","default","fetch","err","close","app","Koa","use","root","Router","get","ctx","body","routes","listen"],"mappings":"aAAA,wB;AACA,4B;AACA,0B;AACA,uC;AACA,+C;AACA,uC;AACA,sC;AACA,uC;;AAEA,MAAMA,SAAS,EAAf;;AAEA;AACA;AACI,SAASC,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6B;AACzB,QAAI,CAACC,MAAMC,OAAN,CAAcF,KAAd,CAAL,EAA2B;AACvBA,gBAAQ,CAACA,KAAD,CAAR;AACH;;AAED,SAAK,IAAIG,CAAT,IAAcH,KAAd,EAAqB;AACjB,YAAIG,KAAKA,EAAEC,OAAF,CAAU,OAAV,EAAmB,EAAnB,EAAuBC,MAAvB,KAAkC,CAAvC,IAA4CF,EAAEC,OAAF,CAAU,OAAV,EAAmB,EAAnB,EAAuBC,MAAvB,KAAkC,CAAlF,EAAqF;AACjFR,mBAAOS,IAAP,CAAYH,CAAZ;AACAI,oBAAQC,GAAR,CAAa,GAAET,KAAM,SAAQI,CAAE,EAA/B;AACH;AACJ;AACJ;;AAED;AACAN,OAAOY,MAAP,CAAc,CAAd;AACA,KAAK,IAAIC,IAAT,IAAiBC,aAAGC,WAAH,CAAe,WAAf,CAAjB,EAA8C;AAC1CL,YAAQC,GAAR,CAAa,oBAAmBE,IAAK,EAArC;;AAEA,UAAM,EAAEG,IAAF,KAAWC,eAAKC,KAAL,CAAWL,IAAX,CAAjB;AACA,KAAC,kBAAkB;AACf,cAAMM,UAAU,MAAMC,oBAAUC,MAAV,CAAiB;AACnCC,sBAAU,IADyB;AAEnCC,kBAAM,CAAC,cAAD,EAAiB,0BAAjB,CAF6B,EAAjB,CAAtB;;AAIA,YAAI;AACA,kBAAMC,OAAO,MAAML,QAAQM,OAAR,EAAnB;AACA,kBAAMC,QAAS,aAAYV,IAAK,EAA1B,EAA6BW,OAA7B,CAAqCH,IAArC,EAA2CI,mBAA3C,EAAmDzB,KAAD,IAAWF,MAAMe,IAAN,EAAYb,KAAZ,CAA7D,CAAN;AACH,SAHD,CAGE,OAAO0B,GAAP,EAAY;AACVnB,oBAAQC,GAAR,CAAYkB,GAAZ;AACH,SALD,SAKU;AACNV,uBAAWA,QAAQW,KAAR,EAAX;AACH;AACJ,KAbD;AAcH;AACL;;AAEA;AACA,MAAMC,MAAM,IAAIC,aAAJ,EAAZ;AACAD,IAAIE,GAAJ,CAAQ,0BAAR;AACAF,IAAIE,GAAJ,CAAQ,8BAAR;;AAEA,MAAMC,OAAO,IAAIC,mBAAJ,EAAb;AACAD,KAAKE,GAAL,CAAS,GAAT,EAAcC,OAAO;AACjBA,QAAIC,IAAJ,GAAWtC,MAAX;AACH,CAFD;AAGA+B,IAAIE,GAAJ,CAAQC,KAAKK,MAAL,EAAR;;AAEAR,IAAIS,MAAJ,CAAW,IAAX;AACA9B,QAAQC,GAAR,CAAa,gBAAb","file":"app.js","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport Koa from 'koa'\r\nimport logger from 'koa-logger'\r\nimport bodyParser from 'koa-bodyparser'\r\nimport Router from 'koa-router'\r\nimport puppeteer from 'puppeteer'\r\nimport fetch from 'node-fetch'\r\n\r\nconst proxys = []\r\n\r\n// Sniffer Service\r\n// setInterval(function () {\r\n    function saver(where, proxy) {\r\n        if (!Array.isArray(proxy)) {\r\n            proxy = [proxy]\r\n        }\r\n\r\n        for (let i of proxy) {\r\n            if (i && i.replace(/[^.]/g, '').length === 3 && i.replace(/[^:]/g, '').length === 1) {\r\n                proxys.push(i)\r\n                console.log(`${where} add: ${i}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Refresh\r\n    proxys.splice(0)\r\n    for (let file of fs.readdirSync('./sniffer')) {\r\n        console.log(`loading sniffer: ${file}`)\r\n\r\n        const { name } = path.parse(file);\r\n        (async function () {\r\n            const browser = await puppeteer.launch({\r\n                headless: true,\r\n                args: ['--no-sandbox', '--disable-setuid-sandbox']\r\n            })\r\n            try {\r\n                const page = await browser.newPage()\r\n                await require(`./sniffer/${name}`).default(page, fetch, (proxy) => saver(name, proxy))\r\n            } catch (err) {\r\n                console.log(err)\r\n            } finally {\r\n                browser && browser.close()\r\n            }\r\n        })()\r\n    }\r\n// }, 1 * 1000);\r\n\r\n// Server\r\nconst app = new Koa()\r\napp.use(logger())\r\napp.use(bodyParser())\r\n\r\nconst root = new Router()\r\nroot.get('/', ctx => {\r\n    ctx.body = proxys\r\n})\r\napp.use(root.routes())\r\n\r\napp.listen(3000)\r\nconsole.log(`Listen at 3000`)"]}